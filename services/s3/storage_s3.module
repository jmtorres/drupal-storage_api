<?php

// Copyright 2008-2009 Jonathan Brown


function storage_s3_storage_service_info() {
  
  $info = array(
    'name' => t('Amazon S3'),
    'dynamic' => FALSE,
    'local' => FALSE,
    'direct' => FALSE,
    'help_destroy' => TRUE
  );
  
  return $info;
}


function _storage_s3_signature($components, $secret_access_key) {

  return base64_encode(hash_hmac('sha1', utf8_encode(implode("\n", $components)), $secret_access_key, TRUE));
}


function _storage_s3_request($access_key_id, $secret_access_key, $method, 
  $bucket = NULL, $object_name = NULL, $file = NULL)
{
  $result = array();
  $date = date(DATE_RFC1123, time());   // we don't use $_SERVER['REQUEST_TIME'] in case it is too old

  $components = array(
    $method,
    base64_encode($file['md5']),
    $file['mimetype'],
    $date
  );

  $headers[] = 'Date: ' . $date;

  $options = array(
    CURLOPT_RETURNTRANSFER => TRUE,
    CURLOPT_AUTOREFERER => TRUE,
    CURLOPT_FOLLOWLOCATION => TRUE
  );

  switch($method) {
  
    case 'PUT':
      $options[CURLOPT_PUT] = TRUE;
      
      if($file) {
        $fp = fopen($file['filepath'], 'r');
        $options[CURLOPT_INFILE] = $fp;
        $options[CURLOPT_INFILESIZE] = $file['size'];
        
        $headers = array_merge($headers, storage_api_http_headers($file));

        if(!$file['private']) {
          $headers[] = 'x-amz-acl: public-read';
          $components[] = 'x-amz-acl:public-read';
        }
      }
      else {
        $options[CURLOPT_INFILESIZE] = 0;
        $headers[] = 'Expect:';
      }
        
      break;
      
    case 'HEAD':
      $options[CURLOPT_NOBODY] = TRUE;
      break;
      
    case 'GET':
      if($object_name) {
        $result['filepath'] = tempnam(file_directory_temp(), '');
        $fp = fopen($result['filepath'], 'w');
        $options[CURLOPT_FILE] = $fp;
      }
      break;
      
    case 'DELETE':
      $options[CURLOPT_CUSTOMREQUEST] = 'DELETE';
      break;
  }
  
  if($bucket)
    $object_name = '/' . $object_name;
  
  $components[] = '/' . $bucket . $object_name;
  
  $signature = _storage_s3_signature($components, $secret_access_key);
  $headers[] = 'Authorization: AWS ' . $access_key_id . ':' . $signature;

  $options[CURLOPT_HTTPHEADER] = $headers;
  
  if($bucket)  
    $bucket .= '.';
  
  $ch = curl_init('http://' . $bucket . 's3.amazonaws.com' . $object_name);
  curl_setopt_array($ch, $options);
  $transfer = curl_exec($ch);
  $result += curl_getinfo($ch);
  curl_close($ch);
  
  if($fp)
    fclose($fp);
    
  if($result['filepath'] && $result['http_code'] != 200) {
    @unlink($result['filepath']);
    unset($result['filepath']);
  }
  
  if(is_string($transfer)) {
    $result['transfer'] = $transfer;
    $result['simplexml'] = @simplexml_load_string($transfer);
  }
  
  return $result;
}


function _storage_s3_url($container, $s3_object) {
  $path = 'http://' . $container['settings']['bucket'] . '.s3.amazonaws.com/' . $s3_object;

  if($container['serving'] == _STORAGE_API_ACCESS_CONTROL) {
    $query['AWSAccessKeyId'] = $container['settings']['access_key_id'];
    $query['Expires'] = $_SERVER['REQUEST_TIME'] + 60 * 60;
    
    $components = array(
      'GET',
      '',
      '',
      $query['Expires'],
      '/' . $container['settings']['bucket'] . '/' . $s3_object
    );
    
    $query['Signature'] = _storage_s3_signature($components, $container['settings']['secret_access_key']);

    foreach($query as $key => &$value)
     $value = $key . '=' . drupal_urlencode($value);
     
    $query = implode('&', $query);
  }

  return url($path, $query);
}


function storage_s3_storage_container_settings_form() {

  $items['access_key_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Access Key ID'),
    '#required' => TRUE,
    '#validated' => TRUE
  );
  
  $items['secret_access_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret Access Key'),
    '#required' => TRUE,
    '#validated' => TRUE
  );

  $items['bucket'] = array(
    '#type' => 'textfield',
    '#title' => t('Bucket name'),
    '#required' => TRUE,
    '#validated' => TRUE
  );

  $items['prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Prefix'),
  );

  return $items;
}


function storage_s3_storage_container_validate($container) {

  if(!$container['settings']['access_key_id']) {
    form_set_error('settings][access_key_id', t('Access Key ID field is required.'));
  }

  if(!$container['settings']['secret_access_key']) {
    form_set_error('settings][secret_access_key', t('Secret Access Key field is required.'));
  }
  
  if(!$container['settings']['bucket']) {
    form_set_error('settings][bucket', t('Bucket name field is required.'));
  }
  
  if(form_get_errors())
    return;

  $result = _storage_s3_request($container['settings']['access_key_id'], $container['settings']['secret_access_key'],
    'GET');   // HEAD doesn't work
    
  if($result['http_code'] != 200) {
    $msg = t('Failed to authenticate with Amazon S3.');
    
    if($result['simplexml']->Message)
      $msg .= t(' Message returned: <i>') . $result['simplexml']->Message . '</i>';
    
    form_set_error('settings', $msg);
    return;
  }

  $result = _storage_s3_request($container['settings']['access_key_id'], $container['settings']['secret_access_key'],
    'HEAD', $container['settings']['bucket']);

  if($result['http_code'] == 403) {
    form_set_error('settings][bucket', t('The bucket is not available.'));
    return;
  }
}


function storage_s3_storage_container_create($container) {

  _storage_s3_request($container['settings']['access_key_id'], $container['settings']['secret_access_key'],
    'PUT', $container['settings']['bucket']);
}


function storage_s3_storage_container_info($container) {

  $info = array(
    t('Bucket') => $container['settings']['bucket'],
    t('Prefix') => $container['settings']['prefix']
  );

  return $info;
}


function storage_s3_storage_object_instance_create($container, $file) {

  if($container['serving'] == _STORAGE_API_ACCESS_CONTROL)
    $file['private'] = TRUE;
  
  $result = _storage_s3_request($container['settings']['access_key_id'], $container['settings']['secret_access_key'],
    'PUT', $container['settings']['bucket'], 'object-' . $file['object_id'], $file);
  
  return $result['http_code'] == 200;
}


function storage_s3_storage_object_instance_destroy($container, $object_id) {
  
  $result = _storage_s3_request($container['settings']['access_key_id'], $container['settings']['secret_access_key'],
    'DELETE', $container['settings']['bucket'], 'object-' . $object_id);
  
  return $result['http_code'] == 204;
}


function storage_s3_storage_object_instance_get_filepath($container, $file) {
  
  $result = _storage_s3_request($container['settings']['access_key_id'], $container['settings']['secret_access_key'],
    'GET', $container['settings']['bucket'], 'object-' . $file['object_id']);

  return $result['filepath'];
}


function storage_s3_storage_object_instance_serve($container, $file) {

  return _storage_s3_url($container, 'object-' . $file['object_id']);
}


function storage_s3_storage_file_instance_create($container, $file) {
  
  if($container['serving'] == _STORAGE_API_ACCESS_CONTROL)
    $file['private'] = TRUE;
  
  $result = _storage_s3_request($container['settings']['access_key_id'], $container['settings']['secret_access_key'],
    'PUT', $container['settings']['bucket'], 'file-' . $file['file_id'], $file);
  
  return $result['http_code'] == 200;
}


function storage_s3_storage_file_instance_destroy($container, $file_id) {
  
  $result = _storage_s3_request($container['settings']['access_key_id'], $container['settings']['secret_access_key'],
    'DELETE', $container['settings']['bucket'], 'file-' . $file_id);
  
  return $result['http_code'] == 204;
}


function storage_s3_storage_file_instance_get_filepath($container, $file) {
  
  $result = _storage_s3_request($container['settings']['access_key_id'], $container['settings']['secret_access_key'],
    'GET', $container['settings']['bucket'], 'file-' . $file['file_id']);

  return $result['filepath'];
}


function storage_s3_storage_file_instance_serve($container, $file) {

  return _storage_s3_url($container, 'file-' . $file['file_id']);
}

