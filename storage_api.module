<?php

// Copyright 2008-2009 Jonathan Brown


define('_STORAGE_API_STORAGE_ONLY', 0);
define('_STORAGE_API_SERVING', 1);
define('_STORAGE_API_ACCESS_CONTROL', 2);


function storage_api_menu() {

  $items['system/storage_api/serve/%storage_api_file'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_storage_api_serve_callback',
    'page arguments' => array(3),
    'access callback' => TRUE
  );
  

  $items['admin/build/storage'] = array(
    'title' => 'Storage',
    'access arguments' => array('administer site configuration'),
    'description' => 'Configure storage.',
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system')
  );


  $items['admin/build/storage/services'] = array(
    'title' => 'Services',
    'description' => 'Configure storage services.',
    'access arguments' => array('administer site configuration'),
    'page callback' => '_storage_api_services',
    'weight' => 0,
    'file' => 'services.admin.inc'
  );
  
  $items['admin/build/storage/services/%storage_api_service'] = array(
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('storage_api_service_form', 4),
    'file' => 'services.admin.inc',
  );
  
  $items['admin/build/storage/services/%storage_api_service/suspend'] = array(
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('storage_api_service_suspend_form', 4),
    'file' => 'services.admin.inc'
  );
  
  $items['admin/build/storage/services/%storage_api_service/unsuspend'] = array(
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('storage_api_service_unsuspend_form', 4),
    'file' => 'services.admin.inc'
  );
  
  
  $items['admin/build/storage/containers'] = array(
    'title' => 'Containers',
    'description' => 'Configure storage containers.',
    'access arguments' => array('administer site configuration'),
    'page callback' => '_storage_api_containers',
    'weight' => 1,
    'file' => 'containers.admin.inc'
  );

  $items['admin/build/storage/containers/list'] = array(
    'title' => 'Overview',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
    'file' => 'containers.admin.inc'
  );
  
  $items['admin/build/storage/containers/create'] = array(
    'title' => 'Create',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('storage_api_create_container_form'),
    'weight' => 1,
    'file' => 'containers.admin.inc'
  );
  
  $items['admin/build/storage/containers/%storage_api_container'] = array(
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('storage_api_container_form', 4),
    'file' => 'containers.admin.inc'
  );
  
  $items['admin/build/storage/containers/%storage_api_container/view'] = array(
    'title' => 'View',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
    'file' => 'containers.admin.inc'
  );
  
  $items['admin/build/storage/containers/%storage_api_container/suspend'] = array(
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('storage_api_container_suspend_form', 4),
    'file' => 'containers.admin.inc',
  );
  
  $items['admin/build/storage/containers/%storage_api_container/unsuspend'] = array(
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('storage_api_container_unsuspend_form', 4),
    'file' => 'containers.admin.inc'
  );
  
  $items['admin/build/storage/containers/%storage_api_container/destroy'] = array(
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('storage_api_container_destroy_form', 4),
    'file' => 'containers.admin.inc'
  );
  
  $items['admin/build/storage/containers/%storage_api_container/edit'] = array(
    'title' => 'Edit',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('storage_api_container_edit_form', 4),
    'weight' => 1,
    'file' => 'containers.admin.inc'
  );

  
  $items['admin/build/storage/classes'] = array(
    'title' => 'Classes',
    'description' => 'Configure storage classes.',
    'access arguments' => array('administer site configuration'),
    'page callback' => '_storage_api_classes_list',
    'weight' => 2,
    'file' => 'classes.admin.inc'
  );

  $items['admin/build/storage/classes/list'] = array(
    'title' => 'Overview',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
    'file' => 'classes.admin.inc'
  );

  $items['admin/build/storage/classes/create'] = array(
    'title' => 'Create',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('storage_api_create_class_form'),
    'weight' => 1,
    'file' => 'classes.admin.inc'
  );

  $items['admin/build/storage/classes/%storage_api_class'] = array(
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'page callback' => '_storage_api_class',
    'page arguments' => array(4),
    'file' => 'classes.admin.inc'
  );
  
  $items['admin/build/storage/classes/%storage_api_class/view'] = array(
    'title' => 'View',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
    'file' => 'classes.admin.inc'
  );
  
  $items['admin/build/storage/classes/%storage_api_class/edit'] = array(
    'title' => 'Edit',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('storage_api_class_edit_form', 4),
    'weight' => 1,
    'file' => 'classes.admin.inc'
  );
  
  $items['admin/build/storage/classes/%storage_api_class/destroy'] = array(
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('storage_api_class_destroy_form', 4),
    'file' => 'classes.admin.inc'
  );
  
  $items['admin/build/storage/classes/%storage_api_class/add'] = array(
    'title' => 'Add container',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('storage_api_class_add_container_form', 4),
    'weight' => 2,
    'file' => 'classes.admin.inc'
  );
  
  $items['admin/build/storage/classes/%storage_api_class/remove/%storage_api_container'] = array(
    'title' => 'Remove container',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('storage_api_class_remove_container_form', 4, 6),
    'file' => 'classes.admin.inc'
  );

  return $items;
}


function storage_api_file_load($file_id) {

  if(!$file_id)
    return FALSE;
    
  
  // either the file is being deleted and no longer has a selector,
  // or we grab the selector with migrating = 0

  $file = db_fetch_array(db_query("
    SELECT *
    FROM {storage_file}
    LEFT JOIN {storage_object}
      ON {storage_file}.object_id = {storage_object}.object_id
    LEFT JOIN {storage_selector}
      ON {storage_file}.selector_id = {storage_selector}.selector_id
    LEFT JOIN {storage_class}
      ON {storage_selector}.class_id = {storage_class}.class_id
    WHERE {storage_file}.file_id = %d
      AND ({storage_file}.selector_id IS NULL
        OR {storage_selector}.migrating = 0)
  ",
    $file_id
  ));
  
  if(!$file)
    return FALSE;
  
  $file['data'] = unserialize($file['data']);
  $file['options'] = unserialize($file['options']);
  
  return $file;
}


function storage_api_service_load($service_id) {

  if(!$service_id)
    return FALSE;

  $service = db_fetch_array(db_query("
    SELECT *
    FROM {storage_service}
    WHERE service_id = '%s'
  ",
    $service_id
  ));
  
  if(!$service)
    return FALSE;
  
  $info = _storage_api_service_invoke($service_id, 'service_info');

  return $service + $info;
}


function storage_api_container_load($container_id) {

  if(!$container_id)
    return FALSE;
    
  $container = db_fetch_array(db_query("
    SELECT *
    FROM {storage_container}
    WHERE container_id = %d
  ",
    $container_id
  ));
  
  if(!$container)
    return FALSE;
  
  $container['settings'] = unserialize($container['settings']);

  return $container;
}


function storage_api_class_load($class_id) {

  $class = db_fetch_array(db_query("
    SELECT *
    FROM {storage_class}
    WHERE class_id = %d
  ",
    $class_id
  ));
  
  if(!$class)
    return FALSE;
  
  $class['options'] = unserialize($class['options']);
  
  return $class;
}


function storage_api_db_insert($table, $fields = NULL, $data = NULL) {

  if(is_array($fields)) {
    foreach($fields as $field => $format) {
      if(isset($data[$field])) {
        $sql_params[] = $field . ' = ' . $format;
        $sql_values[] = $data[$field];
      }
    }
  }

  if(count($sql_params)) {
    $sql_params = 'SET ' . implode(',', $sql_params);

    db_query("
      INSERT INTO {{$table}}
      $sql_params
    ",
      $sql_values
    );
  }
  else {
    db_query("
      INSERT INTO {{$table}}
      () VALUES ()
    ");
  }

  return db_last_insert_id($table, $serial_field);    // todo: determine $serial_field for postgres
}


function _storage_api_update_services() {

  $modules = module_implements('storage_service_info');

  $code_service_ids = array();

  foreach($modules as $module)
    $code_service_ids[] = substr($module, 8);


  $result = db_query("
    SELECT service_id
    FROM {storage_service}
  ");
  
  $db_service_ids = array();

  while($service = db_fetch_array($result)) {

    if(!in_array($service['service_id'], $code_service_ids)) {

      db_query("
        DELETE FROM {storage_service}
        WHERE service_id = '%s'
      ",
        $service['service_id']
      );
    }
    else {
      $db_service_ids[] = $service['service_id'];
    }
  }
  
  
  foreach($code_service_ids as $service_id) {
  
    if(!in_array($service_id, $db_service_ids)) {
    
      db_query("
        INSERT INTO {storage_service}
        SET service_id = '%s'
      ",
        $service_id
      );
    }
  }
}  


function _storage_api_service_invoke() {
  $args = func_get_args();
  
  $args[0] = 'storage_' . $args[0];
  $args[1] = 'storage_' . $args[1];
  
  return call_user_func_array('module_invoke', $args);
}


function _storage_api_service_invoke_all() {
  $results = array();
  
  $args = func_get_args();
  array_unshift($args, NULL);
  $args[1] = 'storage_' . $args[1];
  
  foreach(module_implements($args[1], TRUE) as $module) {
    $args[0] = $module;
    $results[substr($module, 8)] = call_user_func_array('module_invoke', $args);
  }
  
  return $results;
}


function _storage_api_get_service_names() {

  $services = _storage_api_service_invoke_all('service_info');
  
  foreach($services as &$service)
    $service = $service['name'];
  
  return $services;
}


function _storage_api_get_service_name($service_id) {

  $info = _storage_api_service_invoke($service_id, 'service_info');
  
  return $info['name'];
}


function _storage_api_log_serving($file, $container_id = NULL) {
  global $user;
  
  $fields = array(
    'file_id' => "%d",
    'size' => "%d",
    'uid' => "%d",
    'sid' => "'%s'",
    'ip_addr' => "%d",
    'timestamp' => "%d",
    'referrer' => "'%s'"
  );
  
  $values = array(
    'file_id' => $file['file_id'],
    'size' => $file['size'],
    'uid' => $user->uid,
    'sid' => session_id(),
    'ip_addr' => ip2long(ip_address()),
    'timestamp' => $_SERVER['REQUEST_TIME'],
    'referrer' => substr($_SERVER['HTTP_REFERER'], 0, 255)
  );
  
  if($container_id) {
    $fields['container_id'] = "%d";
    $values['container_id'] = $container_id;
  }

  storage_api_db_insert('storage_serving', $fields, $values);
  
  db_query("
    UPDATE {storage_file}
    SET servings = servings + 1
    WHERE file_id = %d
  ",
    $file['file_id']
  );
}


function _storage_api_access_control($file) {

  $results = module_invoke_all('storage_access_alter', $file['module'], $file['type'], $file['file_id']);
  
  foreach($results as $result) {
  
    if(isset($result))
      return $result;
  }
  
  if($file['module']) {
  
    $result = module_invoke($file['module'], 'storage_access', $file['type'], $file['file_id']);
    
    if(isset($result))
      return $result;
  }
  
  if($file['nid']) {
  
    return node_access('view', node_load($file['nid']));
  }
  
  return TRUE;
}


function _storage_api_service_unavailable() {
  drupal_set_header('HTTP/1.1 503 Service Unavailable');
  watchdog('service unavailable', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);

  // Keep old path for reference.
  if (!isset($_REQUEST['destination'])) {
    $_REQUEST['destination'] = $_GET['q'];
  }

  $path = drupal_get_normal_path(variable_get('site_503', ''));
  if ($path && $path != $_GET['q']) {
    // Set the active item in case there are tabs to display or other
    // dependencies on the path.
    menu_set_active_item($path);
    $return = menu_execute_active_handler($path);
  }

  if (empty($return) || $return == MENU_NOT_FOUND || $return == MENU_ACCESS_DENIED) {
    drupal_set_title(t('Service unavailable'));
    $return = t('The requested page is not currently available.');
  }
  print theme('page', $return);
}


function _storage_api_serve($file, $get_url = FALSE) {

  if($file['options']['access_control']) {
    if(!_storage_api_access_control($file)) {
    
      if(!$get_url)
        drupal_access_denied();
      
      return;
    }
  }
  
  $container = db_fetch_array(db_query("
    (
    
      SELECT {storage_container}.*, {storage_object_instance}.reference, 
        {storage_class_container}.weight, {storage_selector}.migrating, 'object' AS type
      FROM {storage_object_instance}
      INNER JOIN {storage_class_container}
        ON {storage_object_instance}.container_id = {storage_class_container}.container_id
      INNER JOIN {storage_selector}
        ON {storage_class_container}.class_id = {storage_selector}.class_id
      INNER JOIN {storage_container}
        ON {storage_object_instance}.container_id = {storage_container}.container_id
      INNER JOIN {storage_service}
        ON {storage_container}.service_id = {storage_service}.service_id
      WHERE {storage_object_instance}.object_id = %d
        AND {storage_class_container}.serving >= 1
        AND {storage_selector}.selector_id = %d
        AND {storage_container}.suspended = 0
        AND {storage_service}.suspended = 0
        
    ) UNION ALL (
    
      SELECT {storage_container}.*, {storage_file_instance}.reference, 
        {storage_class_container}.weight, {storage_selector}.migrating, 'file' AS type
      FROM {storage_file_instance}
      INNER JOIN {storage_class_container}
        ON {storage_file_instance}.container_id = {storage_class_container}.container_id
      INNER JOIN {storage_selector}
        ON {storage_class_container}.class_id = {storage_selector}.class_id
      INNER JOIN {storage_container}
        ON {storage_file_instance}.container_id = {storage_container}.container_id
      INNER JOIN {storage_service}
        ON {storage_container}.service_id = {storage_service}.service_id
      WHERE {storage_file_instance}.file_id = %d
        AND {storage_class_container}.serving >= 1
        AND {storage_selector}.selector_id = %d
        AND {storage_container}.suspended = 0
        AND {storage_service}.suspended = 0
        
    )
    ORDER BY migrating, weight, container_id
    LIMIT 1
  ",
    $file['object_id'],
    $file['selector_id'],
    $file['file_id'],
    $file['selector_id']
  ));
  

  if($container) {
    $container['settings'] = unserialize($container['settings']);

    if($get_url) {

      $info = _storage_api_service_invoke($container['service_id'], 'service_info');
      
      if($info['direct'])   // direct services never produce a URL
        return;
    }
    else {
      _storage_api_log_serving($file, $container['container_id']);
    }
    
    switch($container['type']) {
    
      case 'object':    // this may not return
        $url = _storage_api_service_invoke($container['service_id'], 'object_instance_serve', 
          $container, $file);
        break;
      
      case 'file':      // this will definitely return
        $url = _storage_api_service_invoke($container['service_id'], 'file_instance_serve',
          $container, $file);
        break;
    }
  }
  else {
    if($file['options']['serve_source_url'] && $file['source_url']) {

      $url = $file['source_url'];

      if(!$get_url)
        _storage_api_log_serving($file);
    }
    else {
    
      if(!$get_url)
        _storage_api_service_unavailable();

      return;
    }
  }
  
  if($get_url) {
    return $url;
  }
  
  // this will definitely not return
  drupal_goto($url);    // 302 redirect (don't cache)
}


function _storage_api_serve_callback($file) {
  
  _storage_api_serve($file);    // must be called with only one argument
}


function _storage_api_serve_path($file) {
  
  return 'system/storage_api/serve/' . $file['file_id'] . ($file['filename'] ? ('/' . $file['filename']) : '');
}


function storage_api_serve_url($file, $absolute = FALSE) {

  if(!$file['options']['redirect']) {

    $url = _storage_api_serve($file, TRUE);
    
    if($url)
      return $url;
  }
  
  return url(_storage_api_serve_path($file), array('absolute' => $absolute));
}


function storage_api_new_selector_id() {

  $class_id = db_result(db_query("
    SELECT class_id
    FROM {storage_class}
    ORDER BY name, class_id
    LIMIT 1
  "));

  $fields = array('class_id' => "%d");
  $data = array('class_id' => $class_id);

  return storage_api_db_insert('storage_selector', $fields, $data);
}


function storage_api_selector_item($selector_id, $title = '', $description = '') {
  
  $selector = array(
    '#tree' => TRUE
  );
  
  $result = db_query("
    SELECT *
    FROM {storage_class}
    ORDER BY name, class_id
  ");

  while($class = db_fetch_array($result)) {
    $classes[$class['class_id']] = $class['name'];
  }
  
  $selector['class_id'] = array(
    '#type' => 'select',
    '#title' => $title,
    '#description' => $description,
    '#options' => $classes
  );
  
  $selector['selector_id'] = array(
    '#type' => 'value',
    '#value' => $selector_id
  );

  $current_class_id = db_result(db_query("
  
    SELECT class_id
    FROM {storage_selector}
    WHERE selector_id = %d
      AND migrating = 0
  ",
    $selector_id
  ));

  $selector['class_id']['#default_value'] = $current_class_id;
  
  $selector['current_class_id'] = array(
    '#type' => 'value',
    '#value' => $current_class_id
  );
  
  return $selector;
}


function storage_api_selector_submit($form_item) {

  if($form_item['current_class_id'] == $form_item['class_id'])
    return;


  db_query("
    REPLACE INTO {storage_selector}
    SET selector_id = %d,
      class_id = %d,
      migrating = 0
  ",
    $form_item['selector_id'],
    $form_item['class_id']
  );
  
  
  // are there any files to migrate?

  $num_files = db_result(db_query("
    SELECT COUNT(*)
    FROM {storage_file}
    WHERE selector_id = %d
  ",
    $form_item['selector_id']
  ));
  
  if($num_files) {

    db_query("
      REPLACE INTO {storage_selector}
      SET selector_id = %d,
        class_id = %d,
        migrating = 1
    ",
      $form_item['selector_id'],
      $form_item['current_class_id']
    );

    db_query("
      UPDATE {storage_file}
      SET check_me = 1
      WHERE selector_id = %d
    ",
      $form_item['selector_id']
    );
    
    $new_class = storage_api_class_load($form_item['class_id']);
    
    $message = 'Migrating ' . $num_files . ' ' . format_plural($num_files, 'file', 'files');
    $message .= ' to storage class <i>' . $new_class['name'] . '</i>.';
    
    drupal_set_message($message);
    watchdog('storage_api', $message, NULL);
  }
  else {
  
    db_query("
      DELETE FROM {storage_selector}
      WHERE selector_id = %d
        AND class_id = %d
    ",
      $form_item['selector_id'],
      $form_item['current_class_id']
    );
  }
}


function storage_api_selector_delete($selector_id) {
  
  db_query("
    DELETE FROM {storage_selector}
    WHERE selector_id = %d
  ",
    $selector_id
  );
}


function _storage_api_get_initial_container($selector_id) {

  // find the container with the lowest priority in the class

  $container = db_fetch_array(db_query("
    SELECT {storage_container}.*
    FROM {storage_selector}
    INNER JOIN {storage_class_container}
      ON {storage_selector}.class_id = {storage_class_container}.class_id
    INNER JOIN {storage_container}
      ON {storage_class_container}.container_id = {storage_container}.container_id
    INNER JOIN {storage_service}
      ON {storage_container}.service_id = {storage_service}.service_id
    WHERE {storage_selector}.selector_id = %d
      AND {storage_selector}.migrating = 0
      AND {storage_container}.suspended = 0
      AND {storage_service}.suspended = 0
    ORDER BY {storage_class_container}.weight DESC, {storage_container}.container_id DESC
    LIMIT 1
  ",
    $selector_id
  ));
  
  if(!$container)
    return FALSE;

  $container['settings'] = unserialize($container['settings']);
  
  return $container;
}


function _storage_api_get_object_id($filepath, &$new_object = NULL) {

  $fileinfo = @stat($filepath);
  
  if(!$fileinfo)
    return FALSE;

  $md5 = '0x' . hash_file('md5', $filepath);
  $whirlpool = '0x' . hash_file('whirlpool', $filepath);
  
  $object_id = db_result(db_query("
    SELECT object_id
    FROM {storage_object}
    WHERE size = %d
      AND md5 = %s
      AND whirlpool = %s
  ",
    $fileinfo['size'],
    $md5,
    $whirlpool
  ));
  
  if(!$object_id) {
    
    db_query("
      INSERT INTO {storage_object}
      SET size = %d,
        md5 = %s,
        whirlpool = %s,
        mimetype = '%s'
    ",
      $fileinfo['size'],
      $md5,
      $whirlpool,
      mimedetect_mime(array('filepath' => $filepath))
    );
    
    $object_id = db_last_insert_id('storage_objects', 'object_id');
    $new_object = TRUE;
  }
  
  return $object_id;
}


function _storage_api_create_object_instance($container, $file) {

  $success = _storage_api_service_invoke($container['service_id'], 'object_instance_create', 
    $container, $file);
  
  if(!$success)
    return FALSE;
    
  db_query("
    INSERT INTO {storage_object_instance}
    SET object_id = %d,
      container_id = %d,
      reference = '%s'
  ",
    $file['object_id'],
    $container['container_id'],
    $success !== TRUE ? $success : ''
  );
  
  $message = 'Object instance created. <br />';
  $message .= _storage_api_container_log_info($container);
  $message .= _storage_api_object_log_info($file);
  
  watchdog('storage_api', $message, NULL);

  return TRUE;
}


function storage_api_file_reference_exists($container, $reference) {

  return db_result(db_query("
    SELECT COUNT(*)
    FROM {storage_file_instance}
    WHERE container_id = %d
      AND reference = '%s'
  ",
    $container['container_id'],
    $reference
  ));
}


function storage_api_unique_filename($container, $filename) {

  if(storage_api_file_reference_exists($container, $filename)) {

    $pos = strrpos($filename, '.');
    
    if($pos !== FALSE) {
      $name = substr($filename, 0, $pos);
      $ext = substr($filename, $pos);
    }
    else {
      $name = $filename;
    }

    $counter = 0;
    
    do {
      $filename = $name . '_' . $counter++ . $ext;
      
    } while(storage_api_file_reference_exists($container, $filename));
  }

  return $filename;
}


function _storage_api_create_file_instance($container, $file) {

  $success = _storage_api_service_invoke($container['service_id'], 'file_instance_create', 
    $container, $file);
  
  if(!$success)
    return FALSE;
    
  db_query("
    INSERT INTO {storage_file_instance}
    SET file_id = %d,
      container_id = %d,
      reference = '%s'
  ",
    $file['file_id'],
    $container['container_id'],
    $success !== TRUE ? $success : ''
  );
  
  $message = 'File instance created' . ($file['filename'] ? (': ' . $file['filename'] . ' ') : '') . '. <br />';
  $message .= _storage_api_container_log_info($container);
  $message .= _storage_api_file_log_info($file);

  watchdog('storage_api', $message, NULL);

  return TRUE;
}


function _storage_api_object_instance_exists($object_id, $container_id) {

  return db_result(db_query("
    SELECT COUNT(*)
    FROM {storage_object_instance}
    WHERE object_id = %d
      AND container_id = %d
  ",
    $object_id,
    $container_id
  ));
}


function _storage_api_file_instance_exists($file_id, $container_id) {

  return db_result(db_query("
    SELECT COUNT(*)
    FROM {storage_file_instance}
    WHERE file_id = %d
      AND container_id = %d
  ",
    $file_id,
    $container_id
  ));
}


function storage_api_inherit_servings($new_file_id, $old_file_id) {

  if(!$old_file_id)
    return;

  db_query("
    UPDATE {storage_serving}
    SET file_id = %d
    WHERE file_id = %d
  ",
    $new_file_id,
    $old_file_id
  );
  
  $old_servings = db_result(db_query("
    SELECT servings
    FROM {storage_file}
    WHERE file_id = %d
  ",
    $old_file_id
  ));

  db_query("
    UPDATE {storage_file}
    SET servings = servings + %d
    WHERE file_id = %d
  ",
    $old_servings,
    $new_file_id
  );
}


function storage_api_add_file_from_filepath($filepath, $selector_id, $options = array()) {

  $container = _storage_api_get_initial_container($selector_id);
  
  if(!$container)
    return FALSE;

  $object_id = _storage_api_get_object_id($filepath, $new_object);

  $fields = array(
    'filename' => "'%s'",
    'force_download' => '%d',
    'object_id' => '%d',
    'selector_id' => '%d',
    'check_me' => '%d',
    'module' => "'%s'",
    'type' => "'%s'",
    'obtained' => '%d'
  );
  
  $data = $options;
  $data['object_id'] = $object_id;
  $data['selector_id'] = $selector_id;
  $data['check_me'] = TRUE;
  
  if($options['get_filename'])
    $data['filename'] = basename($filepath);
  
  if(!$data['obtained'])
    $data['obtained'] = $_SERVER['REQUEST_TIME'];
  
  $file_id = storage_api_db_insert('storage_file', $fields, $data);
  
  $file = storage_api_file_load($file_id);
  $file['filepath'] = $filepath;
  $file['keep_me'] = $options['keep_me'];
  

  // we need write access to the directory for it to be deleted

  if(!$options['keep_me']) {
  
    if(!is_writable(dirname($filepath)))
      $options['keep_me'] = TRUE;
  }
  
  $service_info = _storage_api_service_invoke($container['service_id'], 'service_info');

  if(!(!$service_info['dynamic'] && $container['serving'] && $options['force_download'])) {

    // if the file's object is already in the system, then the instance might already exist

    if(!$new_object) {
      $exists = _storage_api_object_instance_exists($object_id, $container['container_id']);
    }
    
    if(!$exists) {
      $failure = !_storage_api_create_object_instance($container, $file);
    }
  }
  else {
    $failure = !_storage_api_create_file_instance($container, $file);
  }
  
  if($failure) {
    storage_api_remove_file($file_id);
    return FALSE;
  }
  
  if(!$options['keep_me']) {
    @unlink($filepath);
  }
  
  $message = 'File added' . ($file['filename'] ? (': ' . $file['filename'] . ' ') : '') . '. <br />';
  $message .= _storage_api_file_log_info($file);
  
  $link = $file['nid'] ? l(t('view'), 'node/' . $file['nid']) : NULL;

  watchdog('storage_api', $message, NULL, WATCHDOG_NOTICE, $link);

  return $file_id;
}


function _storage_api_file_log_info($file) {

  $info = $file['module'] ? ('module: ' . $file['module'] . ', ') : '';
  $info .= $file['type'] ? ('type: ' . $file['type'] . ', ') : '';
  $info .= 'class: ' . $file['name'] . ', <br />';
  
  $info .= 'file_id: ' . $file['file_id'];
  $info .= $file['object_id'] ? (', object_id: ' . $file['object_id']) : '';
  $info .= $file['size'] ? (', size: ' . storage_api_format_size($file['size'])) : '';

  return $info;
}


function _storage_api_container_log_info($container) {

  $info = 'container: ' . $container['name'] . ', <br />';

  return $info;
}


function _storage_api_object_log_info($file) {

  $info = 'object_id: ' . $file['object_id'] . ', ';
  $info .= 'size: ' . storage_api_format_size($file['size']);

  return $info;
}


function storage_api_add_file_from_url($url, $selector_id, $options = array()) {

  if(!$url)
    return NULL;

  $fields = array(
    'filename' => "'%s'",
    'force_download' => '%d',
    'object_id' => '%d',
    'selector_id' => '%d',
    'check_me' => '%d',
    'module' => "'%s'",
    'type' => "'%s'",
    'source_url' => "'%s'"
  );
  
  if($options['get_filename'])
    $options['filename'] = basename(parse_url($url, PHP_URL_PATH));
    
  $options['source_url'] = $url;
  $options['selector_id'] = $selector_id;
  $options['check_me'] = TRUE;
  
  $file_id = storage_api_db_insert('storage_file', $fields, $options);
  $file = storage_api_file_load($file_id);
  
  $message = 'File added from url: ' . $url . ' . <br />';
  $message .= _storage_api_file_log_info($file);
  
  watchdog('storage_api', $message, NULL);

  return $file_id;
}


function _storage_api_acquire_from_url($url) {

  $filepath = tempnam(file_directory_temp(), '');
  $fp = fopen($filepath, "w");

  $options = array(
    CURLOPT_FOLLOWLOCATION => TRUE,
    CURLOPT_AUTOREFERER => TRUE,
    CURLOPT_CONNECTTIMEOUT => 30,
    CURLOPT_LOW_SPEED_LIMIT => 256,
    CURLOPT_LOW_SPEED_TIME => 60,
    CURLOPT_FILE => $fp
  );

  // curl is really picky about escaping
  // '://' must not be escaped or it prepends its own 'http://'
  // spaces must be escaped
  
  $ch = curl_init(str_replace(array('%3A', '%2F'), array(':', '/'), rawurlencode($url)));
  curl_setopt_array($ch, $options);
  $result = curl_exec($ch);
  fclose ($fp);
  $info = curl_getinfo($ch);
  curl_close($ch);
  
  switch((int)($info['http_code'] / 100)) {
  
    case 2:
      return $filepath;
      
    case 4:
      @unlink($filepath);
      return FALSE;         // hard failure
      
    default:
      @unlink($filepath);
      return NULL;          // soft failure
  }
}


function _storage_api_delete_object_if_unrequired($object_id) {

  // do any files use this object?
  
  if(db_result(db_query("
    SELECT COUNT(*)
    FROM {storage_file}
    WHERE object_id = %d
  ",
    $object_id
  ))) {
    return;
  }
  
  db_query("
    DELETE FROM {storage_object}
    WHERE object_id = %d
  ",
    $object_id
  );
}


function _storage_api_acquire_from_source_url(&$file) {

  if($_SERVER['REQUEST_TIME'] < $file['data']['next_acquire_time'])
    return;
    
  $filepath = _storage_api_acquire_from_url($file['source_url']);
  
  if($filepath) {
    $object_id = _storage_api_get_object_id($filepath, $new_object);

    if(!$file['object_id']) {
      $file['object_id'] = $object_id;
    }
    
    if($file['object_id'] != $object_id) {    // the file has changed

      _storage_api_delete_object_if_unrequired($object_id);
      @unlink($filepath);
      $filepath = FALSE;
    }
    else {
      unset($file['data']['next_acquire_time']);
      unset($file['data']['next_acquire_delay']);

      db_query("
        UPDATE {storage_file}
        SET object_id = %d,
          obtained = %d,
          data = '%s'
        WHERE file_id = %d
      ",
        $file['object_id'],
        $_SERVER['REQUEST_TIME'],
        serialize($file['data']),
        $file['file_id']
      );
      
      // we need to reload $file to get the filesize, etc
      $file = storage_api_file_load($file['file_id']);
      $file['new_object'] = $new_object;    // _storage_api_ensure_all_instances_exist() will make use of this

      $message = 'Acquired file from url: ' . $file['source_url'] . ' . <br />';
      $message .= _storage_api_file_log_info($file);
      
      $link = $file['nid'] ? l(t('view'), 'node/' . $file['nid']) : NULL;
    
      watchdog('storage_api', $message, NULL, WATCHDOG_NOTICE, $link);

      return $filepath;
    }
  }
  
  if($filepath === FALSE) {   // hard failure

    unset($file['data']['next_acquire_time']);
    unset($file['data']['next_acquire_delay']);

    db_query("
      UPDATE {storage_file}
      SET source_url = '',
        data = '%s'
      WHERE file_id = %d
    ",
      serialize($file['data']),
      $file['file_id']
    );
    
    $file['source_url'] = '';

    $message = 'Failed acquiring file from url: ' . $file['source_url'] . ' . <br />';
    $message .= _storage_api_file_log_info($file);
    
    $link = $file['nid'] ? l(t('view'), 'node/' . $file['nid']) : NULL;
    
    watchdog('storage_api', $message, NULL, WATCHDOG_WARNING, $link);

    return FALSE;
  }
  
  
  // soft failure
  
  if($file['data']['next_acquire_time']) {
  
    $file['data']['next_acquire_time'] += $file['data']['next_acquire_delay'];
    $file['data']['next_acquire_delay'] *= 2;
  }
  else {
    $file['data']['next_acquire_time'] = $_SERVER['REQUEST_TIME'] + 60;
    $file['data']['next_acquire_delay'] = 120;
  }
  
  db_query("
    UPDATE {storage_file}
    SET data = '%s'
    WHERE file_id = %d
  ",
    serialize($file['data']),
    $file['file_id']
  );
}


function storage_api_get_local_filepath(&$file, &$keep_me) {

  $container = db_fetch_array(db_query("
    (
    
      SELECT {storage_container}.*, {storage_object_instance}.reference, 
        {storage_class_container}.weight, {storage_selector}.migrating, 'object' AS type
      FROM {storage_object_instance}
      INNER JOIN {storage_class_container}
        ON {storage_object_instance}.container_id = {storage_class_container}.container_id
      INNER JOIN {storage_selector}
        ON {storage_class_container}.class_id = {storage_selector}.class_id
      INNER JOIN {storage_container}
        ON {storage_object_instance}.container_id = {storage_container}.container_id
      INNER JOIN {storage_service}
        ON {storage_container}.service_id = {storage_service}.service_id
      WHERE {storage_object_instance}.object_id = %d
        AND {storage_selector}.selector_id = %d
        AND {storage_container}.suspended = 0
        AND {storage_service}.suspended = 0
        
    ) UNION ALL (
    
      SELECT {storage_container}.*, {storage_file_instance}.reference, 
        {storage_class_container}.weight, {storage_selector}.migrating, 'file' AS type
      FROM {storage_file_instance}
      INNER JOIN {storage_class_container}
        ON {storage_file_instance}.container_id = {storage_class_container}.container_id
      INNER JOIN {storage_selector}
        ON {storage_class_container}.class_id = {storage_selector}.class_id
      INNER JOIN {storage_container}
        ON {storage_file_instance}.container_id = {storage_container}.container_id
      INNER JOIN {storage_service}
        ON {storage_container}.service_id = {storage_service}.service_id
      WHERE {storage_file_instance}.file_id = %d
        AND {storage_selector}.selector_id = %d
        AND {storage_container}.suspended = 0
        AND {storage_service}.suspended = 0
        
    )
    ORDER BY migrating, weight DESC, container_id
    LIMIT 1
  ",
    $file['object_id'],
    $file['selector_id'],
    $file['file_id'],
    $file['selector_id']
  ));
  
  if($container) {
  
    $container['settings'] = unserialize($container['settings']);

    switch($container['type']) {
    
      case 'object':
        $filepath = _storage_api_service_invoke($container['service_id'], 'object_instance_get_filepath', 
          $container, $file);
        break;
      
      case 'file':
        $filepath = _storage_api_service_invoke($container['service_id'], 'file_instance_get_filepath', 
          $container, $file);
        break;
    }

    $service_info = _storage_api_service_invoke($container['service_id'], 'service_info');
    $keep_me = $service_info['local'];
  }
  else if($file['source_url']) {

    $filepath = _storage_api_acquire_from_source_url($file);
    $keep_me = FALSE;
  }

  return $filepath;
}


function storage_api_remove_file($file_id) {

  if(!$file_id)
    return;
  
  $file = storage_api_file_load($file_id);
  
  if(!$file)
    return;
  
  db_query("
    UPDATE {storage_file}
    SET selector_id = NULL,
      check_me = 1
    WHERE file_id = %d
  ",
    $file_id
  );
  
  $message = 'File removed' . ($file['filename'] ? (': ' . $file['filename'] . ' ') : '') . '. <br />';
  $message .= _storage_api_file_log_info($file);
  
  watchdog('storage_api', $message, NULL);
}


function storage_api_http_headers($file) {

  $headers[] = 'Content-Type: ' . $file['mimetype'];
  $headers[] = 'Content-Length: ' . $file['size'];
  $headers[] = 'Content-MD5: ' . base64_encode($file['md5']);
  $headers[] = 'Last-Modified: ' . date(DATE_RFC1123, $file['obtained']);
  $headers[] = 'Cache-control: max-age=' . 60 * 60 * 24 * 365;  // the file will stay fresh for a whole year
  
  if($file['force_download'])
    $headers[] = 'Content-Disposition: attachment; filename="' . $file['filename'] . '"';

  return $headers;
}


function storage_api_set_http_headers($file) {

  // unset the headers we don't want (they still get sent unfortunately)

  header('Set-Cookie:');
  header('Expires:');
  
  
  foreach(storage_api_http_headers($file) as $header) {
    header($header);
  }
}


function storage_api_mime_extension($mimetype) {

  $path = drupal_get_path('module', 'storage_api');
  require_once $path . '/mime_extension.inc';

  return _storage_api_mime_extension($mimetype);
}


function _storage_bcmath() {

  // crappy bcmath replacements

  if(!function_exists('bcdiv'))
  {
    function bcdiv($left_operand, $right_operand, $scale = 0)
    {
      return round($left_operand / $right_operand, $scale);
    }
  }

  if(!function_exists('bccomp'))
  {
    function bccomp($left_operand, $right_operand, $scale = 0)
    {
      if($left_operand == $right_operand)
        return 0;
        
      if($left_operand > $right_operand)
        return 1;
        
      return -1;
    }
  }
}


// http://en.wikipedia.org/wiki/Kilobyte

function storage_api_format_size($count) {

  if($count < 1000) {
    return format_plural($count, '1 byte', '@count bytes');
  }
  
  _storage_bcmath();
  
  $count = bcdiv($count, 1000, 2);
  $u = 0;
  
  while(bccomp($count, 1000) >= 0) {

    $count = bcdiv($count, 1000, 2);
    $u++;
  }

  $units = array('kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB');
  
  return $count . ' ' . $units[$u];
}


function storage_api_theme() {

  return array(
    'storage_api_class_edit_form' => array(
      'arguments' => array('content' => NULL),
    ),
  );
}


function storage_api_form_alter(&$form, $form_state, $form_id) {

  switch($form_id) {
  
    case 'system_modules':

      $form['#submit'][] = '_storage_api_update_services';
      break;
  }
}


function storage_api_enable() {

  // in case the service modules are enabled simultaneously as the form_alter above wont have taken affect

  _storage_api_update_services();
}


function storage_api_cron() {

  $path = drupal_get_path('module', 'storage_api');
  require_once './' . $path . '/cron.inc';
  
  _storage_api_cron();
}

