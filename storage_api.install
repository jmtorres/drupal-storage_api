<?php


function storage_api_install() {
  global $db_type;

  switch($db_type) {
  
    case 'mysql':
    case 'mysqli':
    
      db_query("
        CREATE TABLE {storage_services} (
          service_id VARCHAR(255) NOT NULL,
          suspended TINYINT NOT NULL,
          
          PRIMARY KEY (service_id)
        )
      ");

      db_query("
        CREATE TABLE {storage_containers} (
          container_id INT UNSIGNED NOT NULL auto_increment,
          name VARCHAR(255) NOT NULL,
          service_id VARCHAR(255) NOT NULL,
          settings VARCHAR(255) NOT NULL,
          serving TINYINT NOT NULL,
          suspended TINYINT NOT NULL,
          
          PRIMARY KEY (container_id)
        )
      ");

      db_query("
        CREATE TABLE {storage_classes} (
          class_id INT UNSIGNED NOT NULL auto_increment,
          name VARCHAR(255) NOT NULL,
          options VARCHAR(255) NOT NULL,
          
          PRIMARY KEY (class_id)
        )
      ");

      db_query("
        CREATE TABLE {storage_class_containers} (
          class_id INT UNSIGNED NOT NULL,
          container_id INT UNSIGNED NOT NULL,
          weight INT NOT NULL,
          serving TINYINT NOT NULL,
          
          PRIMARY KEY (class_id, container_id)
        )
      ");

      db_query("
        CREATE TABLE {storage_selectors} (
          selector_id INT UNSIGNED NOT NULL auto_increment,
          class_id INT UNSIGNED NOT NULL,
          migrating TINYINT NOT NULL,
          
          PRIMARY KEY (selector_id)
        )
      ");

      db_query("
        CREATE TABLE {storage_objects} (
          object_id INT UNSIGNED NOT NULL auto_increment,
          size BIGINT UNSIGNED NOT NULL,
          md5 BINARY(16) NOT NULL,
          whirlpool BINARY(64) NOT NULL,
          mimetype VARCHAR(255) NOT NULL,
          
          PRIMARY KEY (object_id),
          UNIQUE KEY (size, md5, whirlpool)
        )
      ");

      db_query("
        CREATE TABLE {storage_files} (
          file_id INT UNSIGNED NOT NULL auto_increment,
          selector_id INT UNSIGNED DEFAULT NULL,
          object_id INT UNSIGNED DEFAULT NULL,

          source_url VARCHAR(255) NOT NULL,
          obtained INT UNSIGNED NOT NULL,

          filename VARCHAR(255) NOT NULL,
          force_download TINYINT NOT NULL,
          module VARCHAR(255) NOT NULL,
          type VARCHAR(255) NOT NULL,
          nid INT UNSIGNED DEFAULT NULL,

          check_me TINYINT NOT NULL,
          data VARCHAR(255) NOT NULL,

          servings INT UNSIGNED NOT NULL,

          PRIMARY KEY (file_id),
          KEY (selector_id),
          KEY (check_me),
          KEY (servings)
        )
      ");

      db_query("
        CREATE TABLE {storage_object_instances} (
          object_id INT UNSIGNED NOT NULL,
          container_id INT UNSIGNED NOT NULL,
          reference VARCHAR(255) NOT NULL,
          
          PRIMARY KEY (object_id, container_id)
        )
      ");

      db_query("
        CREATE TABLE {storage_file_instances} (
          file_id INT UNSIGNED NOT NULL,
          container_id INT UNSIGNED NOT NULL,
          reference VARCHAR(255) NOT NULL,
          
          PRIMARY KEY (file_id, container_id)
        )
      ");

      db_query("
        CREATE TABLE {storage_servings} (
          timestamp INT UNSIGNED NOT NULL,
          file_id INT UNSIGNED NOT NULL,
          container_id INT UNSIGNED NOT NULL,
          size INT UNSIGNED NOT NULL,
          uid INT UNSIGNED NOT NULL,
          sid CHAR(32) NOT NULL,
          ip_addr INT UNSIGNED NOT NULL,
          referrer VARCHAR(255) NOT NULL,
          
          KEY (timestamp),
          KEY (file_id),
          KEY (container_id),
          KEY (uid)
        )
      ");
      
      break;

    case 'pgsql':
      break;
  }
}


function storage_api_uninstall() {
  db_query('DROP TABLE {storage_services}');
  db_query('DROP TABLE {storage_containers}');
  db_query('DROP TABLE {storage_classes}');
  db_query('DROP TABLE {storage_class_containers}');
  db_query('DROP TABLE {storage_selectors}');
  db_query('DROP TABLE {storage_objects}');
  db_query('DROP TABLE {storage_files}');
  db_query('DROP TABLE {storage_object_instances}');
  db_query('DROP TABLE {storage_file_instances}');
  db_query('DROP TABLE {storage_servings}');
}

